# Tuneout Command Reference

## Application Commands

~ help(string)
    Shows help for the application.
	Search for specific command usage with a provided string.
	- string (optional): command or part of command in string format.
	                     If omitted, the command displays the whole help file.
	Examples: help("inte"), help("interval"), help("interval("), help()

~ showVersion()
	Display the current version of the application.

## Information Commands

~ categoryOf(term)
	Return the category of a given term.
	- term: A term (string) in the application project.
	Example: categoryOf("lento")

~ chord(note or midiIndex, chordName, inversion)
	Display a triad or quad chord on a given scale based on a root note.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- chordName: A valid short or long-form chord name. For example, "major", "minor", "diminished", "augmented", "major 7th", "minor 7th", "7th", "half diminished 7th", "major sixth", "diminished 7th".
	- inversion (optional): get the inversion of the chord by the degree of the inversion
	Examples: chord(60, "minor"), chord(G, "major"), chord(C4, "7th")

~ chordFinder([notes without octave], inversion, enharmonic)
	Find the chords the match the given notes.
	- notes without octave: A comma-separated list of notes without octave specifier (eg [C#, B, Ax]).
	- inversion (optional): If omitted or -n, chords are output with no inversion. If -i, chords are found based on order of notes entered, and inversions are specified in the output.
	- enharmonic (optional): If omitted or -e, all enharmonic chords are found. If -f, only the first one chord that best matches the order of notes is output.
	Examples: chordFinder([C, E, G]), chordFinder([F#, A, C, Eb], -i, -e), chordFinder([A, C, E] , -n), chordFinder([C, Eb, Gb, Bb], -f)

~ chordFunction(roman numeral, keyNote, key)
	Return the chord which corresponds to the given position of the given key.
	- roman numeral: number in roman format from 0 - 7 (I - VII)
	- keyNote: A note (eg C#, B, Bbb or Ax)
	- key: The key type ("major" or "minor")
    Examples: chordFunction(I, C, "major"), chordFunction(IV, D, "minor")

~ crotchet()
	Return the duration of a crotchet in ms based on the currently set tempo.

~ enharmonic(note)
	Return the simple enharmonic equivalent for the given note.
	- note: A note (eg C#4, B, Bbb or Ax).

~ enharmonicHigh(note)
	Return the higher enharmonic equivalent for the given note.
	- note: A note (eg C#4, B, Bbb or Ax).

~ enharmonicInterval(intervalName)
 	Return an enharmonic equivalent interval if it exists
 	- intervalName: The name of an interval
 	Examples: enharmonicInterval("Diminished 7th")

~ enharmonicLow(note)
	Return the lower enharmonic equivalent for the given note.
	- note: A note (eg C#4, B, Bbb or Ax).

~ getInstrument([override])
	Return the currently set instrument
	- override -g add to output midi code and group of selected instrument
	- eg getInstrument(), getInstrument(-g)

~ functionOf(chordNote, chordName, keyNote, key)
	Return the function of the given chord and scale.
	- chordNote: A note with no octave(eg C#, B, Bbb or Ax).
	- chordName: A valid chord. For example "7th" or "minor".
	- keyNote: A note with no octave(eg C#, B, Bbb or Ax).
	- key: The key type ("major" or "minor")
    Examples: functionOf(F, "7th", Bb, "major"), functionOf(F, "minor 7th", C, "major")

~ getIntervalSemitone(intervalName)
	Return the semitone of the provided interval name.
	- intervalName: An interval name	 ("unison", "min2", ""maj2", "min3", "maj3", "per4", "aug4", "dim5", "per5", "min6", "maj6", "dim7", "min7", "maj7" or "octave")
                       	 ("Perfect Unison", "Minor 2nd", "Major 2nd", "Minor 3rd", "Major 3rd", "Perfect 4th", "Augmented 4th",
                       	"Diminished 5th", "Perfect 5th", "Minor 6th", "Major 6th", "Diminished 7th", ""Minor 7th", "Major 7th" or "Perfect Octave")
                       	 ("P1", "m2", ""M2", "m3", "M3", "P4", "A4", "d5", "P5", "m6", "M6", "d7", "m7", "M7" or "P8")
                       	 as well as interval up to 2 octaves eg. major 13th

~ getUnitDuration()
	Return the name of a currently set unit duration with its value.

~ hasEnharmonic(note)
	Return true if there is a simple enharmonic equivalent for the given note.
	- note: A note (eg C#4, B, Bbb or Ax).

~ hasEnharmonicInterval(intervalName)
	Return true if the interval has enharmonic equivalent
	- intervalName: The name of an interval
	Examples: hasEnharmonicInterval("Diminished 7th")

~ interval(note or midiIndex, semitone or intervalName)
	Return a corresponding note of the provided interval.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- semitone or intervalName: A number of semitones 0-24 or
	interval name	 ("unison", "min2", ""maj2", "min3", "maj3", "per4", "aug4", "dim5", "per5", "min6", "maj6", "dim7", "min7", "maj7" or "octave")
	 ("Perfect Unison", "Minor 2nd", ""Major 2nd", "Minor 3rd", "Major 3rd", "Perfect 4th", "Augmented 4th",
	"Diminished 5th", "Perfect 5th", "Minor 6th", "Major 6th", "Diminished 7th", ""Minor 7th", "Major 7th" or "Perfect Octave")
	 ("P1", "m2", ""M2", "m3", "M3", "P4", "A4", "d5", "P5", "m6", "M6", "d7", "m7", "M7" or "P8")
	 as well as interval up to 2 octaves eg. major 13th

~ keySignature((note, scale, [override]) or (number of flats/sharps or [notes in signature), [override])
    Displays the key signature of the given scale. Also displays the scale with the given key signature.
    - note: A note (eg C#, B)
    - key: The key type ("major" or "minor")
    - override for (note, scale) input ONLY: -n yields the number of sharps/flats
    - overrides for (Signature, notes in signature) input ONLY:
                -a yields the key signature in major scales
                -m yields the key signature in minor scale
                -b displays the key signature in both major and minor scale
    Note: The notes in signature must be in the right order.
          The keySignature command also does not accept enharmonics.
    Example: keySignature(C, "minor", -n), keySignature(4#), keySignature([F#], -b)

~ languageOf(term)
	Return the language of a given term.
	- term: A term (string) in the application project.
	Example: languageOf("lento")

~ listInstruments([override])
	Return the list of all available instrument for play functionality.
	- override -f return  all midi instruments
	- eg instrumentList(), instrumentList(-f)

~ listPatterns()
    Returns the list of user defined patterns.
    Example: listPatterns()

~ listPercussionInstruments()
    Returns the list of all percussion instruments with their midi numbers and names.
    Example: listPercussionInstruments()

~ listUnitDurations()
	Return the list of unit durations with value.
    Example: listUnitDurations()

~ meaningOf(term)
	Return the meaning of a given term.
	- term: A term (string) in the application project.
	Example: meaningOf("lento")

~ midi(note or midiInd)
	Return the corresponding midi number for a given note.
	- note: A note (eg C#4, B, Bbb or Ax).
    Examples: midi(C), midi(C4)

~ modeOf(note or midi, scale, degree)
    Return the name of the mode with the given scale and degree.
    - note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
    - scale: The scale type."major" or "minor"
    - degree: The degree of the mode wanted. e.g. 1
    Examples modeOf(C4, "major", 2), modeOf(F4, "major", 6)

~ note(midiIndex)
	Return the corresponding note for the given midi number.
	- midiIndex: A midi number between 0 and 127.
	Example: note(60)

~ parentOf(note or midi, ModeName)
    Return the parent scale and the root note of the 1st degree mode from the given mode.
    - note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
    - Mode: The name of the mode you want the parent of. e.g. "dorian"
    Examples parentOf(C4, "phrygian"), parentOf(F4, "Mixolydian")

~ scale(note or midiIndex, scale, [override])
	Return the selected scale beginning from the note provided.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- override: -M. This switches the output of the command. If a note is inputted then midi numbers are outputted and
		if a midi number is inputted then a note is outputted.
	Valid Scales: "major", "minor", "major pentatonic", "minor pentatonic", "blues", "melodic minor", "harmonic minor"

~ semitone(note or midiIndex, step)
	Return a new note after it is moved by a given step.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- step: Number of semitones up (positive number) or down (negative number) from the given note.
	Examples: semitone(C4, 3), semitone(43, -10)

~ swing()
	Display the currently set swing style.

~ tempo()
	Return the currently set tempo in bpm.

~ qualityOf(roman numeral)
   	Return the quality of the diatonic chord function.
   	- roman numerals: number in roman format from 0 - 7 (I - VII)
    Example: qualityOf(VI), qualityOf(II)



## Set Commands

~ addToLoop(loopName, percussion, beat)
	Set add to a given loop with a percussion instrument and beat.
	- loopName: the name of the loop to add to.
	- percussion: the percussion midi number or instrument name to add to the loop.
	- beat: the beat to add to the loop, i.e., when to use the instrument.
	Examples: addToLoop("test", 35, "X-X"), addToLoop("test", "Cowbell", "XXX")

~ setInstrument(newInstrument)
	Set new midi instrument using midi code from the list of available instruments or the name of the instrument.
	- newInstrument: midi code of instrument available in application and in the range 0 to 127.
	Example: setInstrument(22), setInstrument("Viola")

~ setMelody(melody, melodyName, instrument)
    Set new melody phrase.
	- melody : melody definition. If multiple events (notes or chords), enclose each event in curly brackets. See below for notation in each event.
		{note or midi, duration}
		- note or midiIndex: a note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127. For simultaneous notes (chord) enclose in square brackets. For rest, enter note R or midi number -1.
		- duration: a valid name of unit duration type or value of type.
	- melodyName : name of melody in quotes.
	- instrument (optional): instrument for the melody using midi code from the list of available instruments or the name of the instrument.
	Examples: setMelody({C4}, "melody1"), setMelody({C4, "crotchet"}, {E5, "breve"}, "melody2"), setMelody({[C4, E4, G4]}, {[D4, F#4, A4]}, "melody3", "Celesta")

~ setPattern(digitalPattern, patternName)
    Creates a digital pattern for scales.
    - digitalPattern: where first note in the scale is 1, second is 2, etc
    - patternName: name of the pattern
    Examples: setPattern("1 2 3 2 1", "hello")

~ setSwing(swingName)
	Set the swing style to the given name.
	- swingName: String, a valid short or long-form swing name. For example, "light", "medium", "heavy".
	Examples: setSwing("heavy"), setSwing("5/8 3/8"), setSwing("2:1")

~ setTempo(newTempo, override)
	Set the tempo to the given bpm in a sensible range, or outside the range with -f override.
	- newTempo: Tempo in the range 20 to 300 bpm.
	- override: -f to enter a newTempo outside the range 20 to 300 bpm.
	Examples: setTempo(80), setTempo(10, -f)

~ setTerm(term, language, meaning, category)
	Define a term for the application project.
	- term: String defining the term name.
	- language: String defining the source language of the term.
	- meaning: String defining the term meaning.
	- category: String defining the term category. Can be empty "".
	Examples: setTerm("lento", "Italian", "slowly", "tempo"), setTerm("Allegretto", "Italian", "moderately fast", "")

~ setUnitDuration(unitDurationName or unitDurationValue)
	Set the unit duration type using its name or value.
	- unitDurationName or unitDurationValue: a valid name of unit duration type or value of type. For example, "crotchet", "demisemiquaver", "1/4", "1".
	Examples: setUnitDuration("quaver"), setUnitDuration("1/128"), setUnitDuration("4")


## Play Commands

~ play(note or midiIndex, tempo, unit duration)
	Play a note out loud for given duration, or the current tempo if the duration is not specified.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- tempo (optional): A tempo in bpm between 20 and 300. If omitted the note plays with the currently set tempo. This can be overridden with -f.
	- unit duration (optional): A unit duration as name or as value. If omitted the note plays with the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Example: play(C4,160), play(55, 120), play(55, 110, "quaver"), play(55, 110, "quaver..."), play(D4, ".."), play(19, 1000, -f), play(55, 500, -f, "quaver")

~ playChord(note or midiIndex, chordName, inversion, override, unit duration)
	Play a chord with the given note and chord name in either unison or in arpeggio.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- chordName: A valid short or long-form chord name. For example, "major", "minor", "diminished", "augmented", "major 7th", "minor 7th", "7th", "half diminished 7th", "major sixth", "diminished 7th".
	- inversion (optional): get the inversion of the chord by the degree of the inversion.
	- override (optional): If omitted or -s the chord notes play simultaneously (in unison). If -a then the notes play arpeggiated (in sequence with half crotchet duration).
	- unit duration (optional): A unit duration as name or as value. If omitted the chord plays with the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Examples: playChord(a,"major"), playChord(Bb,"mn", -a), playChord(60,"Augmented triad"), playChord(60, "major 7th", "quaver...")

~ playInterval(note or midiIndex, semitone or intervalName, unit duration)
	Play a tonic note then play another note of the provided interval after three crotchets silence.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- semitone or intervalName: A number of semitones (0-24) or
	interval name	 ("unison", "min2", ""maj2", "min3", "maj3", "per4", "aug4", "dim5", "per5", "min6", "maj6", "dim7", "min7", "maj7" or "octave")
	 ("Perfect Unison", "Minor 2nd", ""Major 2nd", "Minor 3rd", "Major 3rd", "Perfect 4th", "Augmented 4th",
	"Diminished 5th", "Perfect 5th", "Minor 6th", "Major 6th", "Diminished 7th", ""Minor 7th", "Major 7th" or "Perfect Octave")
	 ("P1", "m2", ""M2", "m3", "M3", "P4", "A4", "d5", "P5", "m6", "M6", "d7", "m7", "M7" or "P8")
	 as well as interval up to 2 octaves eg. major 13th
	- unit duration (optional): A unit duration as name or as value. If omitted the interval plays with the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Examples: playInterval(C4, "maj3"), playInterval(76, 12), playInterval(60, 1, "crotchet..")

~ playMelody(melodyName)
	Play a predefined melody.
	-melodyName: A melody name that exists in the current project, between quotes.
	Example: playMelody("happy and you know it")

~ playPercussion(midiIndex or name of instrument, tempo, unit duration)
	Play a sound of percussion instrument for given duration, or the current tempo if the duration is not specified.
	- midiIndex or name of instrument: A name of percussion instruments (eg "Cowbell") or midi number of percussion instrument between 35 and 81.
	- tempo (optional): A tempo in bpm between 20 and 300. If omitted the sound plays with the currently set tempo. This can be overridden with -f.
	- unit duration (optional): A unit duration as name or as value. If omitted the sound plays with the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Example: playPercussion(56,160), playPercussion("cowbell", 120), playPercussion(81, 110, "quaver"), playPercussion("Mid Tom 1", 110, "quaver..."), playPercussion("Ride Bell", ".."), playPercussion(37, 1000, -f)

~ playPercussionLoop(loopName, loop number, unit duration)
	Plays a percussion beat.
	- loopName: the name of the loop to run
	- loop number: (optional): The number of times the loop should run.
	- unit duration: (optional): A unit duration as name or as value. If omitted the rest period is the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Example: playPercussionLoop("test"), playPercussionLoop("test", 4, "1/8"), playPercussionLoop("test", "1/8"), playPercussionLoop("test", 2)

~ playScale(note or midiIndex, scale, order, style, unit duration)
	Play a scale at the currently set tempo starting with the note or midiIndex, in an optional order and optional swing style.
	- note or midiIndex: A note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	- scale: A valid scale. For example "major" or "minor".
	- order (optional): If omitted or "ascending", the scale is played ascending.
	    If "descending" the scale is played descending. If "both" then the scale is played both ascending and descending.
	    A digital pattern can also be used either by a named pattern or by using the format "1 2 3 2" to specify the order.
	- style (optional): If omitted or -n, the scale is played in normal (straight) style. If -s, the scale is played in swing style where notes have alternating long/short durations. If -t the scale is played in triplet feel style.
	- unit duration (optional): A unit duration as name or as value. If omitted the scale plays with the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Valid Scales: "major", "minor", "major pentatonic", "minor pentatonic", "blues", "melodic minor", "harmonic minor"
	Examples: playScale(C4, "major"), playScale(b#, "minor", "descending"), playScale(62, "major", "both", -s), playScale(B, "blues", -t), playScale(C, "major", "crotchet."), playScale(C, "major", "1/16"), playScale(C, "major", "..")

~ rest(tempo, unit duration)
	Rests for a period of time.
	- tempo (optional): A tempo in bpm between 20 and 300. If omitted the note plays with the currently set tempo. This can be overridden with -f.
	- unit duration (optional): A unit duration as name or as value. If omitted the rest period is the currently set unit duration. Unit duration can be extended using dot(s). Dots can be also used instead of unit duration name/value to extend currently set unit duration. Maximum number of dots is three, more dots will be automatically reduced to three.
	Example: rest(160), rest(110, "quaver"), rest(290, "quaver..."), rest(".."), rest(400, -f, "crotchet")

## Tutor Commands

~ chordFunctionTutor(numberQuestions, override)
	Starts the chord function tutor on a new tab.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
	- override (optional): If omitted, both chord and function questions are asked. If -f the tutor asks only function questions. If -c the tutor only asks chord questions.
	Examples: chordFunctionTutor(), chordFunctionTutor(32), chordFunctionTutor(-f), chordFunctionTutor(6,-b)

~ chordSpellingTutor(numberQuestions, questionType, chordTypes, randomChords)
    Starts the chord spelling tutor in a new tab with indicated options selected.
    - numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
    - questionType (optional): What type of questions are asked. "spelling" or "chord".
    - chordTypes (optional): What chord types to generate questions with. "major", "minor", "augmented", "diminished", "6th" and/or "7th"
    - randomChords (optional): If -r then random (non-existent) chords should be generated.
    Examples: chordSpellingTutor(), chordSpellingTutor(4, "chord", "major", "diminished"), chordSpellingTutor(-r, "major", "spelling")

~ chordTutor(numberQuestions, override)
	Starts the chord recognition tutor on a new tab.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
	- override (optional): If omitted, the chord is played simultaneously (in unison). If -a the chord is played arpeggiated. If -b the chord is played arpeggiated then simultaneously.
	Examples: chordTutor(), chordTutor(12), chordTutor(-a), chordTutor(6,-b)

~ intervalTutor(numberQuestions, [numberOctaves], [intervalType])
    Starts the interval tutor on a new tab.
    - numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
    - numberOctaves (optional): The number of octaves for interval range, whether oct1/oct2.
    Eg. oct1
    - intervalType (optional): The type of interval
    Eg. "all", "major", or "minor".
    Examples: intervalTutor(), intervalTutor(10), intervalTutor(oct2), intervalTutor(6, oct1, "major")

~ keySignatureTutor([numberQuestions], [questionTypeOption], [keySignatureOption], [scaleNameOption])
	Starts the key signature tutor on a new tab.
	NOTE: The order of the overrides is important. The tutor will not accept it otherwise.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000. If left blank, the default question is 1.
	- questionTypeOption (optional): can be one of the following:
	    -k:     the test will display a key signature selected at random, and the user will have to give the corresponding
	                scale name
	    -s:     the test will display a scale name selected at random, and the user will have to give the corresponding
	                key signature
	    -t:     the tutor will ask both types of questions
	    If left blank, the default setting is -t (both)
	- keySignatureOption (optional): can be one of the following:
	    -n:     the tutor will specify and ask for the number of sharps and flats
	    -l:     the tutor will specify and ask for the list of the sharps and flats
	    -c:     the tutor will randomly choose whether to list or number the sharps and flats
	- scaleNameOption (optional): can be one of the following:
	    -M:     the tutor will specify and ask for the corresponding major scale
	    -m:     the tutor will specify and ask for the corresponding minor scale
	    -b:     the tutor will randomly choose whether to specify and ask for the major or minor scales.
	Examples: keySignatureTutor(), keySignatureTutor(10), keySignatureTutor(10, -k), keySignatureTutor(-t, -M),
	        keySignatureTutor(-c, -M), keySignatureTutor(10, -m)

~ musicalTermTutor(numberQuestions)
	Starts the musical term tutor on a new tab.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
	Examples: musicalTermTutor(), musicalTermTutor(10)

~ pitchTutor(numberQuestions, [pitchRangeMin, pitchRangeMax])
	Starts the pitch tutor on a new tab.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
	- pitchRangeMin/pitchRangeMax (optional): The lowest and highest notes to use for the tutor.
	Each is a note (eg C#4, B, Bbb or Ax) or midi number between 0 and 127.
	Examples: pitchTutor(), pitchTutor(10), pitchTutor([C4,A5]), pitchTutor(10, [C, D])

~ scaleModeTutor(numberQuestions, modeType)
	Starts the scale mode tutor on a new tab.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
	- modeType: The type of modes to include in the tutor. Options are "both", "major" or "melodic minor".
	Examples: scaleModeTutor(), scaleModeTutor(15), scaleModeTutor(5, "major")

~ scaleTutor(numberQuestions, numberOctaves, override, type)
	Starts the scale recognition tutor on a new tab.
	- numberQuestions (optional): The number of questions in the tutor, from 1 to 1000.
	- numberOctaves (optional): The number of octaves in the scale randomly  generated for test, from oct1 to oct4.
	- override (optional): If omitted, the scale is played ascending. If -d the scale is played descending.
	If -b then the scale is played both ascending and descending.
	Type: The type of scales to include in the tutor. Options are "all", "scales", "major modes" or "minor modes".
	Examples: scaleTutor(), scaleTutor(15), scaleTutor("scales"), scaleTutor(oct2), scaleTutor(-b),
	scaleTutor(oct3, -d), scaleTutor(14, -b), scaleTutor(4, oct2, -b, "minor modes")

~ tutorStats()
    Opens the Tutor Stats view that gives a visual representation of tutor scores.
